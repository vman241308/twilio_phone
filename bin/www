#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bPhone:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//	   _____  ____   _____ _  ________ _______      _____ ____
//	  / ____|/ __ \ / ____| |/ /  ____|__   __|    |_   _/ __ \
//	 | (___ | |  | | |    | ' /| |__     | |         | || |  | |
//	  \___ \| |  | | |    |  < |  __|    | |         | || |  | |
//	  ____) | |__| | |____| . \| |____   | |        _| || |__| |
//	 |_____/ \____/ \_____|_|\_\______|  |_|       |_____\____/
//

//
//	Initialize the Twilio module
//
let client = require('twilio')(process.env.ACCOUNT_SID, process.env.AUTH_TOKEN);

//
//  Create a socket IO server and attach the server to the already established
//  connection by the http server
//
process.bphone = require('socket.io').listen(server);

process.bphone.on('connection', function(socket) {

	//
	//  Check if everything is ok with the account, and the connection with
	//  the Twilio bac-end.
	//
	client.accounts(process.env.ACCOUNT_SID).get(function(err, account) {

		if(err)
		{
			socket.emit('alert', err.message);
		}
		else
		{
			if(account.status != 'active')
			{
				socket.emit('alert', account.status);
			}
		}

	});

	//
	//  Change some basic Socket IO settings
	//
	socket.setMaxListeners(20);

	//
	//  1.	Ask Twilio to send us back a list of all our active numbers
	//
	client.incomingPhoneNumbers.list(function(err, data) {

		//
		//	If there is an error show it in the UI
		//
		if(err)
		{
			socket.emit('alert', err.message);

			return 1;
		}

		//
		//	Loop over the array of phone numbers with all their properties.
		//
		data.incomingPhoneNumbers.forEach(function(number) {

			//
			//	Make a variable to hold the capabilities in emoji format
			//
			let emoji = "";

			//
			//	Go over the list of capabilities and create a string with things
			//	that are only available with that number.
			//
			for(let key in number.capabilities)
			{
				if(key == "voice" && number.capabilities)
				{
					emoji += "🗣";
				}

				if(key == "sms" && number.capabilities)
				{
					emoji += "📝"
				}

				if(key == "mms" && number.capabilities)
				{
					emoji += "🖼"
				}
			}

			let obj = {

				sid: number.sid,
				nr: number.phoneNumber,
				capabilities: emoji

			}

			socket.emit('number', obj);

			let array = [];

			//
			//	Retrieve all the messages for a specific number
			//
			client.messages.get({To: number.phoneNumber}, function(err, response) {

				response.messages.forEach(function(message) {

					let found = false

					array.forEach(function(ble) {

						if(ble == message.from)
						{
							found = true
						}

					});

					if(!found)
					{
						let obj = {

							from: message.from,
							to: message.to

						}

						socket.emit('fromNumber', obj);
						array.push(message.from)
					}

				});

			});

			//
			//	Retrieve all the messages for a specific number
			//
			client.messages.get({From: number.phoneNumber}, function(err, response) {

				response.messages.forEach(function(message) {

					let found = false

					array.forEach(function(ble) {

						if(ble == message.to)
						{
							found = true
						}

					});

					if(!found)
					{
						let obj = {

							from: message.to,
							to: message.from

						}

						socket.emit('fromNumber', obj);
						array.push(message.to)
					}

				});

			});

		});

	});

	//
	//  Let the user know if the communication with the back-end was lost
	//
	socket.on('disconnect', function() {

		socket.emit('alert', "You've lost connection - Refresh");

	});

	//
	// List all the messages for a given number
	//
	socket.on('messages', function(msg) {

		//
		//  List all the messages for a given number
		//
		client.messages.get({From: msg.from, To: msg.to}, function(err, response) {

			response.messages.forEach(function(messages) {

				socket.emit('message', {

					origin: "click",
					date: messages.dateCreated,
					body: messages.body

				});

			});

		});

		//
		//  List all the messages for a given number
		//
		client.messages.get({From: msg.to, To: msg.from}, function(err, response) {

			response.messages.forEach(function(messages) {

				socket.emit('message', {

					origin: "click",
					date: messages.dateCreated,
					body: messages.body

				});

			});

		});

	});

	//
	//  Send a message for a given number
	//
	socket.on('sendMessage', function(msg) {

		client.sendMessage({

			to: msg.to,
			from: msg.from,
			body: msg.message

		}, function(err, data) {

			if(err)
			{
				socket.emit('alert', err.message);
			}
			else
			{
				socket.emit('message', {

					date: data.dateCreated,
					body: data.body

				});
			}

		});

	});

	//
	//  Send a message for a given number
	//
	socket.on('delete', function(sid, callback) {

		client.incomingPhoneNumbers(sid).delete(function(err, deleted) {

			if(err)
			{
				socket.emit('alert', err.message);
			}
			else
			{
				callback();
			}

		});

	});

	//
	//  Buy new numbers
	//
	socket.on('buy', function(country) {

		//
		//  First, search for available phone numbers
		//
		client.availablePhoneNumbers(country).local
			.get({SmsEnabled: true})
			.then(function(searchResults) {

			//
			//  handle the case where there are no numbers found
			//
			if (searchResults.availablePhoneNumbers.length == 0)
			{
				throw new Error("No number found.")
			}

			//
			//  Okay, so there are some available numbers.  Now, let's buy
			//  the first one in the list.  Return the promise created by
			//  the next call to Twilio:
			//
			return client.incomingPhoneNumbers.create({

				phoneNumber: searchResults.availablePhoneNumbers[0].phoneNumber,
				voiceUrl: "https://demo.twilio.com/welcome/voice",
				smsUrl: "https://" + process.env.BASE_URL + "/webhook",
				SmsMethod: "POST"

			});

		}).then(function(number) {

			let obj = {

				sid: number.sid,
				nr: number.phoneNumber

			};

			//
			//  We bought the number!  Everything worked!
			//
			socket.emit('bought', obj);

		}).fail(function(error) {

			socket.emit('alert', 'Purchase failed! Reason: ' + error.message);

		});

	});

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
